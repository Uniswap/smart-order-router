import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';

/**
 * TODO(felix): remove this file and make it autogenerated everytime using npm run codegen.
 * The issue right now is with the RefType that is causing errors when we build
 */

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  BigDecimal: { input: any; output: any; }
  BigInt: { input: any; output: any; }
  DateTime: { input: any; output: any; }
};

export enum Blockchain {
  Polygon = 'POLYGON',
  PolygonMumbai = 'POLYGON_MUMBAI'
}

export type GetQuoteRequest = {
  algorithm?: InputMaybe<Scalars['String']['input']>;
  amount: Scalars['BigInt']['input'];
  chain: Blockchain;
  deadline?: InputMaybe<Scalars['String']['input']>;
  enableUniversalRouter?: InputMaybe<Scalars['Boolean']['input']>;
  gasPriceWei?: InputMaybe<Scalars['String']['input']>;
  minSplits?: InputMaybe<Scalars['Int']['input']>;
  permitAmount?: InputMaybe<Scalars['String']['input']>;
  permitExpiration?: InputMaybe<Scalars['String']['input']>;
  permitNonce?: InputMaybe<Scalars['String']['input']>;
  permitSigDeadline?: InputMaybe<Scalars['String']['input']>;
  permitSignature?: InputMaybe<Scalars['String']['input']>;
  recipient?: InputMaybe<Scalars['String']['input']>;
  simulateFromAddress?: InputMaybe<Scalars['String']['input']>;
  slippageTolerance?: InputMaybe<Scalars['String']['input']>;
  tokenInAddress: Scalars['String']['input'];
  tokenOutAddress: Scalars['String']['input'];
  type: TradeType;
};

export type MethodParameters = {
  __typename?: 'MethodParameters';
  calldata?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  _empty?: Maybe<Scalars['String']['output']>;
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Query = {
  __typename?: 'Query';
  _empty?: Maybe<Scalars['String']['output']>;
  getQuote: Quote;
};


export type QueryGetQuoteArgs = {
  input: GetQuoteRequest;
};

export type Quote = {
  __typename?: 'Quote';
  amount: Scalars['String']['output'];
  amountDecimals: Scalars['String']['output'];
  blockNumber: Scalars['String']['output'];
  gasPriceWei: Scalars['String']['output'];
  gasUseEstimate: Scalars['String']['output'];
  gasUseEstimateQuote: Scalars['String']['output'];
  gasUseEstimateQuoteDecimals: Scalars['String']['output'];
  gasUseEstimateUSD: Scalars['String']['output'];
  methodParameters?: Maybe<MethodParameters>;
  quote: Scalars['String']['output'];
  quoteDecimals: Scalars['String']['output'];
  quoteGasAdjusted: Scalars['String']['output'];
  quoteGasAdjustedDecimals: Scalars['String']['output'];
  quoteId: Scalars['String']['output'];
  route?: Maybe<Array<Maybe<Array<V3PoolInRoute>>>>;
  routeString: Scalars['String']['output'];
  simulationError?: Maybe<Scalars['Boolean']['output']>;
  simulationStatus: Scalars['String']['output'];
};

export type TokenInRoute = {
  __typename?: 'TokenInRoute';
  address: Scalars['String']['output'];
  chainId: Scalars['Int']['output'];
  decimals: Scalars['String']['output'];
  symbol: Scalars['String']['output'];
};

export enum TradeType {
  ExactIn = 'EXACT_IN',
  ExactOut = 'EXACT_OUT'
}

export type V3PoolInRoute = {
  __typename?: 'V3PoolInRoute';
  address: Scalars['String']['output'];
  amountIn?: Maybe<Scalars['String']['output']>;
  amountOut?: Maybe<Scalars['String']['output']>;
  fee: Scalars['String']['output'];
  liquidity: Scalars['String']['output'];
  sqrtRatioX96: Scalars['String']['output'];
  tickCurrent: Scalars['String']['output'];
  tokenIn: TokenInRoute;
  tokenOut: TokenInRoute;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
// @ts-ignore
export type ResolversInterfaceTypes<RefType extends Record<string, unknown>> = {
  Node: never;
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  BigDecimal: ResolverTypeWrapper<Scalars['BigDecimal']['output']>;
  BigInt: ResolverTypeWrapper<Scalars['BigInt']['output']>;
  Blockchain: Blockchain;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']['output']>;
  GetQuoteRequest: GetQuoteRequest;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  MethodParameters: ResolverTypeWrapper<MethodParameters>;
  Mutation: ResolverTypeWrapper<{}>;
  Node: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Node']>;
  Query: ResolverTypeWrapper<{}>;
  Quote: ResolverTypeWrapper<Quote>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  TokenInRoute: ResolverTypeWrapper<TokenInRoute>;
  TradeType: TradeType;
  V3PoolInRoute: ResolverTypeWrapper<V3PoolInRoute>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  BigDecimal: Scalars['BigDecimal']['output'];
  BigInt: Scalars['BigInt']['output'];
  Boolean: Scalars['Boolean']['output'];
  DateTime: Scalars['DateTime']['output'];
  GetQuoteRequest: GetQuoteRequest;
  ID: Scalars['ID']['output'];
  Int: Scalars['Int']['output'];
  MethodParameters: MethodParameters;
  Mutation: {};
  Node: ResolversInterfaceTypes<ResolversParentTypes>['Node'];
  Query: {};
  Quote: Quote;
  String: Scalars['String']['output'];
  TokenInRoute: TokenInRoute;
  V3PoolInRoute: V3PoolInRoute;
};

export interface BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigDecimal'], any> {
  name: 'BigDecimal';
}

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type MethodParametersResolvers<ContextType = any, ParentType extends ResolversParentTypes['MethodParameters'] = ResolversParentTypes['MethodParameters']> = {
  calldata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  _empty?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
};

export type NodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<null, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  _empty?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  getQuote?: Resolver<ResolversTypes['Quote'], ParentType, ContextType, RequireFields<QueryGetQuoteArgs, 'input'>>;
};

export type QuoteResolvers<ContextType = any, ParentType extends ResolversParentTypes['Quote'] = ResolversParentTypes['Quote']> = {
  amount?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  amountDecimals?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gasPriceWei?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gasUseEstimate?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gasUseEstimateQuote?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gasUseEstimateQuoteDecimals?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gasUseEstimateUSD?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  methodParameters?: Resolver<Maybe<ResolversTypes['MethodParameters']>, ParentType, ContextType>;
  quote?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quoteDecimals?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quoteGasAdjusted?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quoteGasAdjustedDecimals?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quoteId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  route?: Resolver<Maybe<Array<Maybe<Array<ResolversTypes['V3PoolInRoute']>>>>, ParentType, ContextType>;
  routeString?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  simulationError?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  simulationStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TokenInRouteResolvers<ContextType = any, ParentType extends ResolversParentTypes['TokenInRoute'] = ResolversParentTypes['TokenInRoute']> = {
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  chainId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type V3PoolInRouteResolvers<ContextType = any, ParentType extends ResolversParentTypes['V3PoolInRoute'] = ResolversParentTypes['V3PoolInRoute']> = {
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  amountIn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  amountOut?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fee?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sqrtRatioX96?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tickCurrent?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tokenIn?: Resolver<ResolversTypes['TokenInRoute'], ParentType, ContextType>;
  tokenOut?: Resolver<ResolversTypes['TokenInRoute'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  BigDecimal?: GraphQLScalarType;
  BigInt?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  MethodParameters?: MethodParametersResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Quote?: QuoteResolvers<ContextType>;
  TokenInRoute?: TokenInRouteResolvers<ContextType>;
  V3PoolInRoute?: V3PoolInRouteResolvers<ContextType>;
};

